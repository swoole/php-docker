#!/usr/bin/env php
<?php
function copy_dir($src, $dst)
{
    if (is_link($src)) {
        symlink(readlink($src), $dst);
    } elseif (is_dir($src)) {
        @mkdir($dst);
        foreach (scandir($src) as $file) {
            if ($file != '.' && $file != '..') {
                copy_dir("$src/$file", "$dst/$file");
            }
        }
    } elseif (is_file($src)) {
        copy($src, $dst);
    } else {
        echo "WARNING: Cannot copy $src (unknown file type)\n";
    }
}

function curlGet($url)
{
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_HEADER, 0);
    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);
    curl_setopt($ch, CURLOPT_TIMEOUT, 10);
    curl_setopt($ch, CURLOPT_HTTPHEADER, ['Accept-Encoding: gzip']);
    curl_setopt($ch, CURLOPT_ENCODING, "gzip");
    $output = curl_exec($ch);
    curl_close($ch);
    return $output;
}

function replace_hook_string(string $string, $from, $to): string
{
    $walk = function (&$value) {
        $value = "{{{$value}}}";
    };
    if (is_string($from)) {
        $from = "{{{$from}}}";
    } elseif (is_array($from)) {
        array_walk($from, $walk);
    }
    return str_replace($from, $to, $string);
}

// generate standard
$standard_template = file_get_contents(__DIR__ . '/templates/standard/Dockerfile');
$standard_tags = ['latest', '7.0', '7.1', '7.2', 'rc'];
foreach ($standard_tags as $tag) {
    $content = replace_hook_string($standard_template, 'tag', $tag);
    @mkdir(__DIR__ . '/' . $tag);
    file_put_contents(__DIR__ . '/' . $tag . '/Dockerfile', $content);
}

// generate alpine
$alpine_template = file_get_contents(__DIR__ . '/templates/alpine/Dockerfile');
$alpine_tags = ['7.0-alpine', '7.1-alpine', '7.2-alpine', 'rc-alpine'];
foreach ($alpine_tags as $tag) {
    $content = replace_hook_string($alpine_template, 'tag', $tag);
    @mkdir(__DIR__ . '/' . $tag);
    file_put_contents(__DIR__ . '/' . $tag . '/Dockerfile', $content);
}